[PrefixDeclaration]
:		http://visualdataweb.org/semangit/
dc:		http://purl.org/dc/elements/1.1/#
dbo:		http://dbpedia.org/ontology/
owl:		http://www.w3.org/2002/07/owl#
rdf:		http://www.w3.org/1999/02/22-rdf-syntax-ns#
xml:		http://www.w3.org/XML/1998/namespace
xsd:		http://www.w3.org/2001/XMLSchema#
obda:		https://w3id.org/obda/vocabulary#
rdfs:		http://www.w3.org/2000/01/rdf-schema#

[MappingDeclaration] @collection [[
mappingId	UserMap
target		:User/{id} a :User ; :githubUserLogin {login}^^xsd:string ; :githubUserCompany {company}^^xsd:string ; :githubUserCreatedAt {created_at}^^xsd:dateTime ; :githubUserFake {fake}^^xsd:boolean ; :githubUserDeleted {deleted}^^xsd:boolean ; :githubUserLng {long}^^xsd:float ; :githubUserLat {lat}^^xsd:float ; :githubUserCountryCode {country_code}^^xsd:string ; :githubUserState {state}^^xsd:string ; :githubUserCity {city}^^xsd:string ; :githubUserLocation {location}^^xsd:string ; :githubUserIsOrg {is_organization}^^xsd:boolean . 
source		select id, login, company, created_at,  fake, deleted, `long`, lat, country_code, state, city, location,
			CASE type
			WHEN 'ORG' THEN 'true'
			ELSE 'false'
			END as is_organization
			from users

mappingId	ProjectMap
target		:Repository/{id} a :Repository ; :repositoryUrl {url}^^xsd:anyURI ; :githubHasOwner :User/{owner_id} ; :githubProjectName {name}^^xsd:string ; :githubProjectDescription {description}^^xsd:string ; :repositoryCreatedAt {created_at}^^xsd:dateTime ; :githubForkedFrom :Repository/{forked_from} ; :githubProjectDeleted {deleted}^^xsd:boolean . 
source		select id, url, owner_id, name, description, created_at, forked_from, deleted from projects

mappingId	PullRequestMap
target		:PullRequest/{id} a :PullRequest ; :pullRequestHeadProject :Repository/{head_repo_id} ; :pullRequestBaseProject :Repository/{base_repo_id} ; :pullRequestHeadCommit :Commit/{head_commit_id} ; :pullRequestBaseCommit :Commit/{base_commit_id} ; :id {pullreq_id}^^xsd:integer ; :githubPullRequestIntraBranch {intra_branch}^^xsd:boolean . 
source		select id, head_repo_id, base_repo_id, head_commit_id, base_commit_id, pullreq_id, intra_branch  from pull_requests

mappingId	ProjectCommit
target		:Commit/{commit_id} :belongsToRepository :Repository/{project_id} . 
source		select commit_id, project_id from project_commits

mappingId	PullRequestCommentMap
target		:Comment/{comment_id} a :Comment ; :commentFor :PullRequest/{pull_request_id} ; :commentAuthor :User/{user_id} ; :commentBody {body}^^xsd:string ; :commentPos {position}^^xsd:integer ; :commentCreatedAt {created_at}^^xsd:dateTime . 
source		select comment_id, pull_request_id, commit_id, user_id, body, position, created_at from pull_request_comments

mappingId	PullRequestHistoryMap
target		:GithubPullRequestAction/{id} a :GithubPullRequestAction ; :githubPullRequestActionFor :PullRequest/{pull_request_id} ; :githubPullRequestActionCreatedAt {created_at}^^xsd:dateTime ; :githubPullRequestActionType {action}^^xsd:string . 
source		select id, pull_request_id, created_at, action from pull_request_history

mappingId	PullRequestCommitsMap
target		:PullRequest/{pull_request_id} :pullRequestHasCommit :Commit/{commit_id} . 
source		select * from pull_request_commits

mappingId	FollowerMap
target		:github_follow_event/{follower_id}/{user_id} a :GithubFollowEvent ; :githubFollower :user/{follower_id} ; :githubFollows :user/{user_id} ; :githubFollowingSince {created_at}^^xsd:dateTime . 
source		select * from followers

mappingId	ProjectLanguageMap
target		:GithubProjectLanguage/{project_id}/{language} a :GithubProjectLanguage ; :githubProjectLanguageRepo :Repository/{project_id} ; :githubProjectLanguageIs :ProgrammingLanguage/{language} ; :githubProjectLanguageBytes {bytes}^^xsd:integer ; :githubProjectLanguageTimestamp {created_at}^^xsd:dateTime . 
source		select * from project_languages

mappingId	CommitMap
target		:Commit/{id} a :Commit ; :commitSha {sha}^^xsd:string ; :commitAuthor :User/{author_id} ; :commitedBy :User/{committer_id} ; :commitCreatedAt {created_at}^^xsd:dateTime . 
source		select id, sha, author_id, committer_id, created_at from commits

mappingId	WatcherMap
target		:GithubFollowEvent/{repo_id}/{user_id} a :GithubFollowEvent ; :githubFollows :Repository/{repo_id} ; :githubFollower :User/{user_id} ; :githubFollowingSince {created_at}^^xsd:dateTime . 
source		select * from watchers

mappingId	IssueMap
target		:GithubIssue/{id} a :GithubIssue ; :githubIssueProject :Repository/{repo_id} ; :githubIssueReporter :User/{reporter_id} ; :githubIssueAssignee :User/{assignee_id} ; :githubIssuePullRequest :PullRequest/{pull_request_id} ; :githubIssueCreatedAt {created_at}^^xsd:dateTime . 
source		select id, repo_id, reporter_id, assignee_id, pull_request_id, created_at from issues

mappingId	PullRequestUserMap
target		:PullRequest/{pull_request_id} a :PullRequest ; :pullRequestUser :User/{actor_id} . 
source		select pull_request_id, actor_id from pull_request_history

mappingId	CommitCommentMap
target		:Comment/{comment_id} a :Comment ; :commentFor :Commit/{commit_id} ; :commentAuthor :User/{user_id} ; :commentBody {body}^^xsd:string ; :commentPos {position}^^xsd:integer ; :commentCreatedAt {created_at}^^xsd:dateTime . 
source		select comment_id, commit_id, user_id, body, position, created_at from commit_comments

mappingId	UserProgramsInLanguageMap
target		:User/{user_id} :programsInLanguage :GithubProjectLanguage/{project_id}/{language} . 
source		select distinct c.author_id as user_id, pls.language, proj.id as project_id from projects as proj
			join project_languages as pls on proj.id = pls.project_id
			join commits as c on c.project_id = proj.id

mappingId	PullRequestMergedMap
target		:PullRequest/{pull_request_id} :githubPullRequestMerged {is_merged}^^xsd:boolean . 
source		select pull_request_id,
			CASE action
			WHEN 'merged' THEN 'true'
			ELSE 'false'
			END as is_merged
			from pull_request_history where action = 'merged'

mappingId	ProgrammingLanguageMap
target		:ProgrammingLanguage/{language} a :ProgrammingLanguage . 
source		select language from project_languages

mappingId	RepoMilestoneMap
target		:GithubProjectMilestone/{id} a :GithubProjectMilestone ; :milestoneOf :Repository/{repo_id} ; :githubProjectMilestoneName {name}^^xsd:string . 
source		select * from repo_milestones

mappingId	ProjectLabelMap
target		:GithubRepoLabel/{id} a :GithubRepoLabel ; :githubRepoLabelProject :Repository/{repo_id} ; :githubRepoLabelName {name}^^xsd:string . 
source		select id, repo_id, name from repo_labels

mappingId	OrganizationMemberMap
target		:GithubOrganizationJoinEvent/{org_id}/{user_id} a :GithubOrganizationJoinEvent ; :githubOrganizationJoinedBy :User/{user_id} ; :githubOrganizationJoinedAt {created_at}^^xsd:dateTime . 
source		select * from organization_members

mappingId	IssueLabelMap
target		:GithubRepoLabel/{label_id} a :GithubRepoLabel ; :githubIssueLabelUsedBy :GithubIssue/{issue_id} . 
source		select label_id, issue_id from issue_labels
]]

